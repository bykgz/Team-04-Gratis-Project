<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>Team04_Gratis_Project</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>



    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>4.15.0</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-java -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>7.11.1</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/io.cucumber/cucumber-junit -->
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>7.11.1</version>
            <scope>test</scope>
        </dependency>




    </dependencies>

    <build>


        <plugins>


            <!--   Bu eklenti, özellikle entegrasyon testlerinin çalıştırılması için kullanılır.

            Maven standartlarını takip ederek, testlerin başarı durumunu kontrol eder ve proje içindeki testleri yürütmek için yapılandırılabilir.
            Bu özel yapılandırmada:

            testFailureIgnore: Bu özellik, test başarısız olduğunda devam edilip edilmemesini belirler. true olarak ayarlandığında,
            başarısız testlerin sonucu görmezden gelinir ve diğer testler çalıştırılmaya devam eder.
            skipTests: Testlerin tamamen atlanıp atlanmayacağını belirtir. false olarak ayarlandığında, testlerin çalıştırılmasına izin verilir.
            includes: Bu bölüm, hangi test dosyalarının çalıştırılacağını belirtir.
            Burada, **/runners/*TestRunner*.java kalıbıyla belirli bir desen belirtilmiş.
            Bu desen, TestRunner içeren ve runners klasörü altında bulunan Java test dosyalarını ifade eder.
            Bu dosyalar, test edilen uygulamanın belirli bölümlerini veya senaryolarını içerebilir.   -->



            <!--            eğer testler fail olursa diğer testlere geçmesi için -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.2.3</version>
                <configuration>
                    <testFailureIgnore>true</testFailureIgnore>
                    <skipTests>false</skipTests>
                    <includes>
                        <include>**/runners/*TestRunner*.java</include>
                    </includes>
                </configuration>
            </plugin>


            <!-- Bu eklenti, Maven projesindeki testleri çalıştırmak için kullanılır. Özellikle unit testleri yürütmek için yaygın olarak kullanılır.
            Yapılandırmada bulunan bazı anahtar özellikler şunlardır:

            parallel: Testlerin paralel olarak çalıştırılmasını sağlar. classes, methods, veya both değerlerini alabilir.
            Bu örnekte classes olarak ayarlanmış, bu da test sınıflarının paralel olarak çalıştırılacağını gösterir.
            forkCount: Eşzamanlı olarak çalışacak test JVM'lerinin sayısını belirtir. Burada 1 olarak ayarlanmış, yani bir JVM kullanılacağını belirtir.
            threadCount: Her JVM'de çalışacak thread sayısını belirtir. Burada 2 olarak ayarlanmış.
            reuseForks: Bu, fork edilmiş JVM'lerin yeniden kullanılıp kullanılmayacağını belirtir.
            true olarak ayarlanmış, yani fork edilmiş JVM'lerin yeniden kullanılacağını gösterir.
            argLine: JVM için argümanları belirtir. Örneğin, dil ayarını (-Duser.language=en),
             hafıza ayarlarını (-Xmx1024m, -XX:MaxPermSize=256m) ve dosya kodlamasını (-Dfile.encoding=UTF-8) belirler.
            useFile: Bu, testlerin çalıştırılacağı dosyayı kullanıp kullanmayacağını belirtir. Bu durumda false olarak ayarlanmış.
            includes: Hangi test dosyalarının çalıştırılacağını belirtir. Burada **/runners/*TestRunner*.java deseniyle belirli test dosyaları belirtilmiş.
            testFailureIgnore: Bu özellik, test başarısız olduğunda devam edilip edilmemesini belirtir.
             true olarak ayarlandığında, başarısız testlerin sonucu görmezden gelinir ve diğer testler çalıştırılmaya devam eder.-->



            <!--  bu raporla ilgili ayarları yaptığımız yer-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.1.2</version>
                <configuration>
                    <parallel>classes</parallel>
                    <forkCount>1</forkCount>   <!-- iki ayrı işlemi başlatır ve her biri farklı bir test paketi çalıştırır. Bu, testlerin daha hızlı tamamlanmasını sağlar. Ancak, bu ayarın artırılması, sistemin kaynaklarını tüketebilir ve performans sorunlarına neden olabilir. -->
                    <threadCount>2</threadCount>  <!--aynı anda 2 browser çalıştırılacağı anlamına gelir. -->
                    <reuseForks>true
                    </reuseForks>  <!--Maven önceki testlerde oluşturulmuş işlemleri yeniden kullanır -->
                    <argLine>-Duser.language=en</argLine>
                    <argLine>-Xmx1024m</argLine>
                    <argLine>-XX:MaxPermSize=256m</argLine>
                    <argLine>-Dfile.encoding=UTF-8</argLine>
                    <useFile>false</useFile>
                    <includes>
                        <include>**/runners/*TestRunner*.java
                        </include>  <!--runners package si altında  önünde ve sonunda ne olduğu fark etmeksizin  ismi Runner olan classları paralelel olarak çalıştırabileceğim  -->
                    </includes>
                    <testFailureIgnore>true</testFailureIgnore> <!--testin başarısız olmasına rağmen diğer testlere devam eder ve sonunda tüm testleri çalıştırır. -->
                </configuration>


            </plugin>



            <!--         bu daha ayrıntılı bir rapor oluşturuyor bizim için-->
            <plugin>
                <groupId>net.masterthought</groupId>
                <artifactId>maven-cucumber-reporting</artifactId>
                <version>5.7.5</version>
                <executions>
                    <execution>
                        <id>execution</id>
                        <phase>test</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <projectName>Amazon-Project-Jenkins</projectName>
                            <outputDirectory>${project.build.directory}/cucumber-html-reports</outputDirectory>
                            <!--  <cucumberOutput>${project.build.directory}</cucumberOutput>-->
                            <inputDirectory>${project.build.directory}</inputDirectory>
                            <jsonFiles>
                                <param>**/json-reports/*.json</param>
                                <param>**/cucumber*.json</param>
                            </jsonFiles>
                            <classificationFiles>->
                                <param>sample.properties</param>
                                <param>other.properties</param>
                            </classificationFiles>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


        </plugins>


    </build>


</project>


        <!--mvn komutları :   -->

        <!--mvn clean :  bunu kullandığımızda target klasörü felan siliniyor-->

        <!--mvn clean install :  bunu kullanınca targetı siliyor , dependency leri bağımlılıkları tekrar yüklüyor-->

        <!--mvn -X test : bağımlılıkların uyumları , testlerle alakalı kısımlarda bir hata avrmı yokmu vb bakmak için kullanıyoruz



        -->






